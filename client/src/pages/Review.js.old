import React, {Component} from 'react';

import Card from '../components/Card';
import Container from '../components/Container';
import LangOptions from '../components/LangOptions';
import Tab from '../components/Tab';

/* Potentially add random words to below objects */
let initialFlashCardState = [
    {"name": "flashHir", "bool": false, "fullName": "Hiragana", "value": ""},
    {"name": "flashHirDak", "bool": false, "fullName": "Hiragana Dakuten", "value": ""},
    {"name": "flashHirCombo", "bool": false, "fullName": "Combination Hiragana", "value": ""},
    {"name": "flashKat", "bool": false, "fullName": "Katakana", "value": ""},
    {"name": "flashKatDak", "bool": false, "fullName": "Katakana Dakuten", "value": ""},
    {"name": "flashKatCombo", "bool": false, "fullName": "Combination Katakana", "value": ""},
];

let intialPracticeState = [
    {"name": "practHir", "bool": false, "fullName": "Hiragana", "value": ""},
    {"name": "practHirDak", "bool": false, "fullName": "Hiragana Dakuten", "value": ""},
    {"name": "practHirCombo", "bool": false, "fullName": "Combination Hiragana", "value": ""},
    {"name": "practKat", "bool": false, "fullName": "Katakana", "value": ""},
    {"name": "practKatDak", "bool": false, "fullName": "Katakana Dakuten", "value": ""},
    {"name": "practKatCombo", "bool": false, "fullName": "Combination Katakana", "value": ""},
];

let log = (t, s)=> console.log(t, s);

class Review extends Component {

    state={
        rHiragana: [],
        rKatakana: [],
        rAccents: [],
        rKanji: [],
        correctFlash:[],
        wrongFlash: [],
        flashCardIndex: 0,
        flashCardLangs: initialFlashCardState,
        practiceLangs: intialPracticeState,
        selectedFlashItems: [],
        selectedPracticeItems: [],
        flashCardStart: false,
        practiceStart: false,
        guessInput: [],
        answerOutcome: null
    };

    /* EVENT HANDLERS */

    /* Function to take input from the child and assign it to the state for the given item. */
    handleInputChange = (name, value) => {
        log(name, value)
        this.setState({
            [name]: value
        });
    };

    /* Event handling function that will take the button selections and change the bool value for the object with the same name. */
    handleSelection = (name, value)=> {
        // log("Review handleSelection");

        let currentSelections= this.state.flashCardLangs;
        currentSelections.forEach( (val, ind)=> {
            if( name === val.name ) {
                let valueBool= val.bool;
                /* Take the current index of the current selection and overwrite the values. */
                currentSelections[ind].bool= !valueBool;
                this.setState({
                    flashCardLangs: currentSelections,
                });
            };
        });
    };

    /* Handles the reset of cards/quiz and re-randomizes the cards. Initial state needs to be reset to false, the other states emptied, and function for shuffle called. */
    handleReset = ()=> {
        // log("Review handleReset");

        initialFlashCardState.forEach( (value, index)=> {
            initialFlashCardState[index].bool = false;
        });
        intialPracticeState.forEach( (value, index)=> {
            intialPracticeState[index].bool = false;
        });
        this.setState({
            correctFlash:[],
            wrongFlash: [],
            flashCardIndex: 0,
            flashCardLangs: initialFlashCardState,
            practiceLangs: intialPracticeState,
            flashCardStart: false,
            practiceStart: false,
            guessInput: [],
            answerOutcome: null
        }, this.props.shuffle())
    };

    /* Simple function that will start the cards or quiz. */
    handleSubmit = (name, value)=> {
        // log("Review handleSubmit");

        let selectedF= [];
        let selectedP= [];

        this.state.flashCardLangs.forEach( (val, ind)=> {
            if( val.bool ){
                selectedF.push(...val.value);
            };
        });

        this.state.practiceLangs.forEach( (val, ind)=> {
            if( val.bool ){
                selectedP.push(...val.value);
            };
        });

        if( name === "flash" ){
            this.setState({
                flashCardStart: true,
                selectedFlashItems: selectedF,
            }/* , log("Selected Flash items set") */);
        };
        if( name === "practice" ){
            this.setState({
                practiceStart: true,
                selectedPracticeItems: selectedP
            }/* , log("Selected practice items set") */)
        }
    };

    /* TODO: Determin if below function can be refactored to meet DRY standards. Function is used in Review.js and Quiz.js for the same purpose */
    /* Assign the current state of the letters guessed to a variable. Add the key pressed to gInput. Take card selections and the current card index and assign to variable. Create function to itterate to the next card and reset to basic states. */
    entryValidation = (e)=> {
        let gInput = this.state.guessInput;
        gInput += e.key;
        log("Review entryValidation- gInput:", gInput.length)

        let cardSelections = this.state.flashCardLangs;
        let cardIndex = this.state.flashCardIndex;

        let nextCard = ()=> {
            // DRY function to increment cardIndex and reset state.
            setTimeout(()=> {
                cardIndex++
                this.setState({
                    answerOutcome: null,
                    flashCardIndex: cardIndex,
                    guessInput: []
                });
            }, 1000);
        };

        /* Validate if the current guess equals the length of the english translation. If so, run nested if to validate if the input matches the english translation strig or alternate translation exactly. If it does then change states to show correct and add that item to the correctly guessed flash cards. If not then show wrong and assign that item to the incorrectly guessed. After showing correct/incorrect, run the nextCard function. */
        if( gInput.length === cardSelections[cardIndex].englishTranslation.length ) {

            if( gInput === cardSelections[cardIndex].englishTranslation || gInput === cardSelections[cardIndex].alternateEnglishTranslation ) {
                
                /* Set background to green. increment card index. clear guessInput. assign to correctFlash */
                let addCorrect = this.state.correctFlash;
                addCorrect.push(cardSelections[cardIndex]);
                this.setState({
                    answerOutcome: true,
                    correctFlash: addCorrect
                }, nextCard());

            } else {
                /* Set background to red. Increment card index. Clear guessInput. Assign to wrongFlash */
                let addWrong = this.state.wrongFlash;
                addWrong.push(cardSelections[cardIndex]);
                this.setState({
                    answerOutcome: false,
                    wrongFlash: addWrong
                }, nextCard());
            };
        };
    };

    nextCard = (e)=> {
        e.preventDefault();

        let count = this.state.flashCardIndex;
        count++;

        this.setState({
            flashCardIndex: count
        });
    };

    /* TODO: Create way to clear the selection for the flashcards and reset quiz. */

    componentDidMount() {
        // log("Review did mount");

        this.props.shuffle();
        // document.addEventListener("keydown", this.entryValidation);
    };

    componentDidUpdate(prevProps) {
        // log("Review componentDidUpdate");

        if( this.props !== prevProps ){

            /* Loop through props.all 6 times and apply the values to the appropriate variables. */
            for( let i=0; i<6; i++ ) {
                initialFlashCardState[i].value= this.props.all[i];
                intialPracticeState[i].value= this.props.all[i];
            };

            // console.log(initialFlashCardState);
            this.setState({
                rHiragana: this.props.hir,
                rKatakana: this.props.kat,
                rAccents: this.props.acc,
                flashCardLangs: initialFlashCardState,
                practiceLangs: intialPracticeState,
            }/* , log("state set componentDidUpdate") */);
        };
    };

    shouldComponentUpdate(nextProps, nextState) {
        log(nextProps, nextState);
        if( this.state !== nextState ){
            return true
        } else return false
    };

    render() {

        /* TODO:
            Render card with correct information on screen.
            Validate input still functions.
            Give score and reset game after completion.
            Add progress bar.
        */

            /* TODO: destructure this back into components. */
        /* Variables that will allow the card background to change based off the props passed for the input received during flashcards and quiz. */
        let bgColor = "card-body "
        if( this.props.outcome === null ){
            /* Background color class will remain empty or return to neutral. */
        } else if ( this.props.outcome ) {
            /* Background color for card when correct input is registered */
            bgColor+= "bg-success "
        } else {
            /* Background color for card when incorrect input is registered */
            bgColor+= "bg-warning "
        };

        return (
            <Container
                className={"fluid"}
            >
                <Container>

                    <Tab />
                    <div className="tab-content" id="myTabContent">
                        <div className="tab-pane fade " id="charts" role="tabpanel" aria-labelledby="charts-tab">
                            <h1>Charts go here</h1>
                        </div>

                        <div className="tab-pane fade show active" id="flashcards" role="tabpanel" aria-labelledby="flashcards-tab">
                            <div className="row">Flashcards</div>
                            <div className="row">

                                {/* TODO: Possibly replace the .bind function with extract child component. https://www.freecodecamp.org/news/react-pattern-extract-child-components-to-avoid-binding-e3ad8310725e/ */}
                                {/* Pass unique names for the options to the child so they can be properly distinguished based off the page's state. */}
                                <LangOptions
                                    handleSelection={this.handleSelection.bind(this)}
                                    handleSubmit={this.handleSubmit.bind(this)}
                                    handleReset={this.handleReset.bind(this)}
                                    toSelect={this.state.flashCardLangs}
                                    name="flash"
                                    start={this.state.flashCardStart}
                                    />

                                {this.state.flashCardStart ? (
                                    <>
                                    {this.state.selectedFlashItems ? (
                                        <>
                                        <div className="card text-center">
                                            <div className={bgColor}>
                                                <h5 className="card-title">{this.state.selectedFlashItems[this.state.flashCardIndex].character}</h5>
                                                <input onChange={this.handleInputChange} name="guessInput" type="text" value={this.state.guessInput} />
                                                {/* {this.props.show ? (
                                                    <>
                                                    </>
                                                ):(
                                                    <>
                                                    </>
                                                )} */}
                                            </div>
                                        </div>
                                        </>
                                    ):(
                                        <>
                                        false
                                        </>
                                    )}
                                    </>
                                ):(<></>)}

                            </div>

                            <button onClick={this.nextCard}>Next Card</button>
                        </div>

                        <div className="tab-pane fade" id="practiceQuiz" role="tabpanel" aria-labelledby="practiceQuiz-tab">
                            <LangOptions
                                handleChange={this.handleInputChange.bind(this)}
                                handleSubmit={this.handleSubmit.bind(this)}
                                handleReset={this.handleReset.bind(this)}
                                toSelect={this.state.practiceLangs}
                                name="practice"
                                start={this.state.practiceStart}
                                />

                            {this.state.flashCardStart ? (
                                <>
                                <Card 
                                    handleChange={this.handleInputChange.bind(this)}
                                    guessInput={this.state.guessInput}
                                    // character={fCS[fCI].character}
                                    // translation={fCS[fCI].englishTranslation}
                                    start={this.state.flashCardStart}
                                    outcome={this.state.answerOutcome}
                                    />
                                </>
                            ):(<></>)}
                        </div>
                    </div>

                </Container>

            </Container>
        );
    };
};

export default Review;